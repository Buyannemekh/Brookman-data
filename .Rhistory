# Remove primary outcomes at t0 and t1
t1_related <- t1_results[ , !(names(t1_results) %in% all.dv.names.t1)]
t1_related <- t1_related[ , !(names(t1_related) %in% all.dv.names.t0)]
# Remove gender non-conformity index at t0 and t1 since they used for
t1_related <- t1_related[ , !(names(t1_related) %in% gender.nonconformity.t0)]
t1_related <- t1_related[ , !(names(t1_related) %in% gender.nonconformity.t1)]
colnames(t1_related)
# Remove categorical variables
t1_related <- t1_related[, -which(grepl('vf_racename|vf_party', names(t1_related)))]
# Remove categorical variables
t1_related <- t1_related[, -which(grepl('vf_racename|vf_party', names(t1_related)))]
colnames(t1_related)
colnames(t1_related)
# Remove gender non-conformity index at t0 and t1 since they used for
t1_related <- t1_related[ , !(names(t1_related) %in% gender.nonconformity.t0)]
t1_related <- t1_related[ , !(names(t1_related) %in% gender.nonconformity.t1)]
t1_related
# Removing all results of t2 (3 week), t3 (6 week) and t4 (3 month)
t1_results <- t1[, -which(grepl('t2|t3|t4', names(t1)))]
# Pre-specified index of all primary outcomes at t0
all.dv.names.t0 <- c('miami_trans_law_t0', 'miami_trans_law2_t0', 'therm_trans_t0',
'gender_norms_sexchange_t0', 'gender_norms_moral_t0',
'gender_norms_abnormal_t0', 'gender_norm_trans_moral_wrong_t0')
# Remove primary outcomes at t0 and t1
t1_related <- t1_results[ , !(names(t1_results) %in% all.dv.names.t1)]
t1_related <- t1_related[ , !(names(t1_related) %in% all.dv.names.t0)]
# Remove gender non-conformity index at t0 and t1 since they used for
t1_related <- t1_related[ , !(names(t1_related) %in% gender.nonconformity.t0)]
t1_related <- t1_related[ , !(names(t1_related) %in% gender.nonconformity.t1)]
# Remove categorical variables
t1_related <- t1_related[, -which(grepl('vf_racename|vf_party', names(t1_related)))]
colnames(t1_related)
# Remove identifiers
identifiers <- c('id', 'block_ind', 'hh_id')
t1_related <- t1_related[ , !(names(t1_related) %in% identifiers)]
# Remove contacted or responded (as they are all ones in this case)
tracking <- c('respondent_t0', 'respondent_t1', 'contacted')
t1_related <- t1_related[ , !(names(t1_related) %in% tracking)]
# Remove index that are directly related to the survey
survey_method <- c('scale_for_blocking_t0', 'cluster_level_t0_scale_mean','survey_language_t0', 'survey_language_es')
t1_related <- t1_related[ , !(names(t1_related) %in% survey_method)]
colnames(t1_related)
# Remove t1 s except trans.tolerance.dv.t1
t1_related <- t1_related[, -which(grepl('_t1', names(t1_related)))]
colnames(t1_related)
# Remove t1 s except trans.tolerance.dv.t1 and marijuana
t1_related <- t1_related[, -which(grepl('_t1|marijuana', names(t1_related)))]
colnames(t1_related)
identifiers <- c('id', 'block_ind', 'hh_id', 'canvasser_id')
t1_related <- t1_related[ , !(names(t1_related) %in% identifiers)]
colnames(t1_related)
# Removing treat_ind because it is assigned treatment and actual treatment is in exp_actual_convo
t1_related <- t1_related[ , !(names(t1_related) %in% "treat_ind")]
# Removing treat_ind because it is assigned treatment and actual treatment is in exp_actual_convo
t1_related <- t1_related[ , !(names(t1_related) %in% "treat_ind")]
colnames(t1_related)
# Removing treat_ind because it is assigned treatment and actual treatment is in exp_actual_convo
t1_related <- t1_related[, -which(grepl('t1.resid|treat_ind', names(t1_related)))]
colnames(t1_related)
df_split_trans <- modelr::resample_partition(t1_related, c(train=0.5, estim=0.5))
df_train_trans <- dplyr::as_tibble(df_split_trans$train)
df_est_trans<- dplyr::as_tibble(df_split_trans$estim)
outcome <- "trans.tolerance.dv.t1"
treatment <- "exp_actual_convo"
contexts <- colnames(t1_related)[1:30]
contexts <- contexts[contexts != treatment]
contexts
summarize_contexts(t1_related[c(outcome, contexts)])
View(t1_related)
canvasser_info = c("canvass_recycling_rating","canvass_trans_ratingstart","canvass_trans_ratingsecond",
"canvass_trans_ratingend", "canvass_minutes","canvasser_experience")
t1_related <- t1_results[ , !(names(t1_results) %in% canvasser_info)]
colnames(t1_related)
# Remove canvas experience and rating
canvasser_info = c("canvass_recycling_rating","canvass_trans_ratingstart","canvass_trans_ratingsecond",
"canvass_trans_ratingend", "canvass_minutes","canvasser_experience")
t1_related <- t1_related[ , !(names(t1_related) %in% canvasser_info)]
colnames(t1_related)
# Removing all results of t2 (3 week), t3 (6 week) and t4 (3 month)
t1_results <- t1[, -which(grepl('t2|t3|t4', names(t1)))]
# Pre-specified index of all primary outcomes at t0
all.dv.names.t0 <- c('miami_trans_law_t0', 'miami_trans_law2_t0', 'therm_trans_t0',
'gender_norms_sexchange_t0', 'gender_norms_moral_t0',
'gender_norms_abnormal_t0', 'gender_norm_trans_moral_wrong_t0')
# Remove primary outcomes at t0 and t1
t1_related <- t1_results[ , !(names(t1_results) %in% all.dv.names.t1)]
t1_related <- t1_related[ , !(names(t1_related) %in% all.dv.names.t0)]
# Remove gender non-conformity index at t0 and t1 since they used for
t1_related <- t1_related[ , !(names(t1_related) %in% gender.nonconformity.t0)]
t1_related <- t1_related[ , !(names(t1_related) %in% gender.nonconformity.t1)]
# Remove categorical variables
t1_related <- t1_related[, -which(grepl('vf_racename|vf_party', names(t1_related)))]
# Remove identifiers
identifiers <- c('id', 'block_ind', 'hh_id', 'canvasser_id')
t1_related <- t1_related[ , !(names(t1_related) %in% identifiers)]
# Remove contacted or responded (as they are all ones in this case)
tracking <- c('respondent_t0', 'respondent_t1', 'contacted')
t1_related <- t1_related[ , !(names(t1_related) %in% tracking)]
# Remove index that are directly related to the survey
survey_method <- c('scale_for_blocking_t0', 'cluster_level_t0_scale_mean','survey_language_t0', 'survey_language_es')
t1_related <- t1_related[ , !(names(t1_related) %in% survey_method)]
# Remove t1 s except trans.tolerance.dv.t1 and marijuana
t1_related <- t1_related[, -which(grepl('_t1|marijuana', names(t1_related)))]
# Removing treat_ind because it is assigned treatment and actual treatment is in exp_actual_convo
t1_related <- t1_related[, -which(grepl('t1.resid|treat_ind', names(t1_related)))]
# Remove canvas experience and rating
canvasser_info = c("canvass_recycling_rating","canvass_trans_ratingstart","canvass_trans_ratingsecond",
"canvass_trans_ratingend", "canvass_minutes","canvasser_experience")
t1_related <- t1_related[ , !(names(t1_related) %in% canvasser_info)]
colnames(t1_related)
df_split_trans <- modelr::resample_partition(t1_related, c(train=0.5, estim=0.5))
df_train_trans <- dplyr::as_tibble(df_split_trans$train)
df_est_trans<- dplyr::as_tibble(df_split_trans$estim)
outcome <- "trans.tolerance.dv.t1"
treatment <- "exp_actual_convo"
contexts <- colnames(t1_related)[1:24]
contexts <- contexts[contexts != treatment]
contexts
summarize_contexts(t1_related[c(outcome, contexts)])
cates <- map("exp_actual_convo", function(level) {
level <- treatment
X_train <- as.data.frame(df_train_trans[contexts])
W_train <- pull(df_train_trans, level)
Y_train <- pull(df_train_trans, outcome)
X_test <-  as.data.frame(df_est_trans[contexts])
xls <- hte::X_RF(feat = X_train,
tr = W_train,
yobs = Y_train,
ntree_first = 500,
ntree_second = 500,
ntree_prop = 500,
nthread = 1,
min_node_size_spl_first = 1,
min_node_size_ave_first = 1,
min_node_size_spl_second = 1,
min_node_size_ave_second = 1,
min_node_size_spl_prop = 1,
min_node_size_ave_prop = 1)
cate <- hte::EstimateCate(xls, X_test) %>% as_tibble() %>% rename(cate=value)
data_with_cate <- bind_cols(df_est_trans, cate)
})
t1_related <- subset(t1_related, !is.na(t1_related$canvasser_trans))
df_split_trans <- modelr::resample_partition(t1_related, c(train=0.5, estim=0.5))
df_train_trans <- dplyr::as_tibble(df_split_trans$train)
df_est_trans<- dplyr::as_tibble(df_split_trans$estim)
outcome <- "trans.tolerance.dv.t1"
treatment <- "exp_actual_convo"
contexts <- colnames(t1_related)[1:24]
contexts <- contexts[contexts != treatment]
summarize_contexts(t1_related[c(outcome, contexts)])
cates <- map("exp_actual_convo", function(level) {
level <- treatment
X_train <- as.data.frame(df_train_trans[contexts])
W_train <- pull(df_train_trans, level)
Y_train <- pull(df_train_trans, outcome)
X_test <-  as.data.frame(df_est_trans[contexts])
xls <- hte::X_RF(feat = X_train,
tr = W_train,
yobs = Y_train,
ntree_first = 500,
ntree_second = 500,
ntree_prop = 500,
nthread = 1,
min_node_size_spl_first = 1,
min_node_size_ave_first = 1,
min_node_size_spl_second = 1,
min_node_size_ave_second = 1,
min_node_size_spl_prop = 1,
min_node_size_ave_prop = 1)
cate <- hte::EstimateCate(xls, X_test) %>% as_tibble() %>% rename(cate=value)
data_with_cate <- bind_cols(df_est_trans, cate)
})
names(cates) <- "exp_actual_convo"
# Residualize the dependent variable, then transform it per (*44*).
t1.resid <- summary(lm(data$trans.tolerance.dv.t1 ~ x))$residuals
data$t1.resid[as.numeric(names(t1.resid))] <- t1.resid # Maps residuals back into data.
data$transformed.outcome <- with(data, t1.resid * (treat_ind - .5) / .25)
# Vectors describing rows where the outcome was observed.
include.obs <- !is.na(data$transformed.outcome)
x.subset <- cbind(data$treat_ind[include.obs], x[include.obs,])
transformed.outcome <- data$transformed.outcome[include.obs]
# Lasso.
cvfit.lasso <- cv.glmnet(x.subset, transformed.outcome, alpha = 1)
coef(cvfit.lasso, s = "lambda.min")
data$transformed.outcome
placebo_party <- data.frame(table(placebo$vf_party))
treat_party <- data.frame(table(treat$vf_party))
treat_non_other <- subset(treat_party, treat_party$vf_racename != "Other Party")
placebo_non_other <- subset(placebo_party, placebo_party$vf_racename != "Other Party")
placebo_treat_party <- cbind(placebo_non_other, treat_non_other)
colnames(placebo_treat_party) <- c("0", "placebo", "1", "treat")
pander(t(placebo_treat_party))
placebo_party <- data.frame(table(placebo$vf_party))
treat_party <- data.frame(table(treat$vf_party))
treat_non_other <- subset(treat_party, treat_party$vf_racename != "Other Party")
placebo_non_other <- subset(placebo_party, placebo_party$vf_racename != "Other Party")
placebo_treat_party <- cbind(placebo_non_other, treat_non_other)
colnames(placebo_treat_party) <- c("0", "placebo", "1", "treat")
#pander(t(placebo_treat_party))
ggboxplot(placebo_non_other, x = "vf_party",
y = c("trans.tolerance.dv.t0", "trans.tolerance.dv.t1"),
merge = TRUE,
ylab = "trans tolerance",
add = "mean_se", palette = "jco", title = "Placebo group")
placebo_party <- data.frame(table(placebo$vf_party))
treat_party <- data.frame(table(treat$vf_party))
treat_non_other <- subset(treat_party, treat_party$vf_racename != "Other Party")
treat_party
placebo_party <- data.frame(table(placebo$vf_party))
treat_party <- data.frame(table(treat$vf_party))
treat_non_other <- subset(treat, treat$vf_racename != "Other Party")
placebo_non_other <- subset(placebo, placebo$vf_racename != "Other Party")
placebo_treat_party <- cbind(placebo_non_other, treat_non_other)
placebo_party <- data.frame(table(placebo$vf_party))
treat_party <- data.frame(table(treat$vf_party))
placebo_treat_party <- cbind(placebo_party, treat_party)
colnames(placebo_treat_party) <- c("0", "placebo", "1", "treat")
pander(t(placebo_treat_party))
treat_non_other <- subset(treat, treat$vf_racename != "Other Party")
placebo_non_other <- subset(placebo, placebo$vf_racename != "Other Party")
ggboxplot(placebo_non_other, x = "vf_party",
y = c("trans.tolerance.dv.t0", "trans.tolerance.dv.t1"),
merge = TRUE,
ylab = "trans tolerance",
add = "mean_se", palette = "jco", title = "Placebo group")
ggboxplot(treat_non_other, x = "vf_party",
y = c("trans.tolerance.dv.t0", "trans.tolerance.dv.t1"),
merge = TRUE,
ylab = "trans tolerance",
add = "mean_se", palette = "jco", title = "Treatment group")
placebo_party <- data.frame(table(placebo$vf_party))
treat_party <- data.frame(table(treat$vf_party))
placebo_treat_party <- cbind(placebo_party, treat_party)
colnames(placebo_treat_party) <- c("0", "placebo", "1", "treat")
pander(t(placebo_treat_party))
treat_non_other <- subset(treat, treat$vf_party != "Other Party")
placebo_non_other <- subset(placebo, placebo$vf_party != "Other Party")
ggboxplot(placebo_non_other, x = "vf_party",
y = c("trans.tolerance.dv.t0", "trans.tolerance.dv.t1"),
merge = TRUE,
ylab = "trans tolerance",
add = "mean_se", palette = "jco", title = "Placebo group")
ggboxplot(treat_non_other, x = "vf_party",
y = c("trans.tolerance.dv.t0", "trans.tolerance.dv.t1"),
merge = TRUE,
ylab = "trans tolerance",
add = "mean_se", palette = "jco", title = "Treatment group")
placebo_party <- data.frame(table(placebo$vf_party))
treat_party <- data.frame(table(treat$vf_party))
placebo_treat_party <- cbind(placebo_party, treat_party)
colnames(placebo_treat_party) <- c("0", "placebo", "1", "treat")
pander(t(placebo_treat_party))
treat_non_other <- subset(treat, treat$vf_party != "Other Party")
placebo_non_other <- subset(placebo, placebo$vf_party != "Other Party")
ggboxplot(placebo_non_other, x = "vf_party",
y = c("trans.tolerance.dv.t0", "trans.tolerance.dv.t1"),
merge = TRUE,
ylab = "trans tolerance",
palette = "jco", title = "Placebo group")
ggboxplot(treat_non_other, x = "vf_party",
y = c("trans.tolerance.dv.t0", "trans.tolerance.dv.t1"),
merge = TRUE,
ylab = "trans tolerance",
palette = "jco", title = "Treatment group")
pid.interact <- summary(lm(t1$t1.resid ~ t1$treat_ind * t1$canvasser_trans))$coefficients
rownames(pid.interact) <- c("Intercept", "Canvasser Trans", "Canvasser Trans x Treat")
pid.interact
pid.interact <- summary(lm(t1$t1.resid ~ t1$treat_ind * t1$canvasser_trans))$coefficients
rownames(pid.interact) <- c("Intercept", "Treat", "Canvasser Trans", "Canvasser Trans x Treat")
colnames(pid.interact) <- c("Estimate", "Std. Error", "*t*", "*p*")
panderOptions('table.caption.prefix','')
set.caption("Effects at 3 Days by Party Registration, Interaction Term. Linear regression with clustered standard errors.")
pander(pid.interact)
pid.interact <- summary(lm(t1$trans.tolerance.dv.t1 ~ t1$treat_ind * t1$canvasser_trans))$coefficients
rownames(pid.interact) <- c("Intercept", "Treat", "Canvasser Trans", "Canvasser Trans x Treat")
colnames(pid.interact) <- c("Estimate", "Std. Error", "*t*", "*p*")
panderOptions('table.caption.prefix','')
set.caption("Effects at 3 Days by Party Registration, Interaction Term. Linear regression with clustered standard errors.")
pander(pid.interact)
pid.interact <- summary(lm(t1$trans.tolerance.dv.t1 ~ t1$exp_actual_convo * t1$canvasser_trans))$coefficients
rownames(pid.interact) <- c("Intercept", "Treat", "Canvasser Trans", "Canvasser Trans x Treat")
colnames(pid.interact) <- c("Estimate", "Std. Error", "*t*", "*p*")
panderOptions('table.caption.prefix','')
set.caption("Effects at 3 Days by Party Registration, Interaction Term. Linear regression with clustered standard errors.")
pander(pid.interact)
pid.interact <- summary(lm(t1$t1.resid ~ t1$treat_ind * t1$vf_black))$coefficients
pid.interact
```{r, eval=TRUE, echo=FALSE}
pid.interact <- summary(lm(t1$t1.resid ~ t1$treat_ind * t1$vf_black + t1$treat_ind * ( t1$vf_white +  t1$vf_hispanic)))$coefficients
pid.interact
t1$vf_black
pid.interact <- summary(lm(t1$t1.resid ~ t1$treat_ind * t1$vf_black))$coefficients
pid.interact
pid.interact <- summary(lm(t1$t1.resid ~ t1$treat_ind * t1$vf_black))$coefficients
rownames(pid.interact) <- c("Intercept", "Treatment", "Black", "Black X Treat")
colnames(pid.interact) <- c("Estimate", "Std. Error", "*t*", "*p*")
panderOptions('table.caption.prefix','')
set.caption("Effects at 3 Days by Race Registration, Interaction Term. Linear regression with clustered standard errors.")
pander(pid.interact)
race <- data.frame(table(t1$vf_racename))
panderOptions('table.caption.prefix','')
pander(t(race))
afam <- subset(treat_canvas, treat_canvas$vf_racename == "African American")
hispanic <- subset(treat_canvas, treat_canvas$vf_racename == "Hispanic")
caucasian <- subset(treat_canvas, treat_canvas$vf_racename == "Caucasian")
afam_table <- data.frame(table(afam$canvasser_trans))
hispanic_table <- data.frame(table(hispanic$canvasser_trans))
caucasian_table <- data.frame(table(caucasian$canvasser_trans))
treat_race_canvas <- cbind(afam_table, hispanic_table, caucasian_table)
colnames(treat_race_canvas) <- c("0", "afam", "1", "hisp", "3", "caucasian")
pander(t(treat_race_canvas))
race <- data.frame(table(t1$vf_racename))
colnames(pid.interact) <- c("African American", "Asian", "Hispanic", "Caucasian")
panderOptions('table.caption.prefix','')
pander(t(race))
afam <- subset(treat_canvas, treat_canvas$vf_racename == "African American")
hispanic <- subset(treat_canvas, treat_canvas$vf_racename == "Hispanic")
caucasian <- subset(treat_canvas, treat_canvas$vf_racename == "Caucasian")
afam_table <- data.frame(table(afam$canvasser_trans))
hispanic_table <- data.frame(table(hispanic$canvasser_trans))
caucasian_table <- data.frame(table(caucasian$canvasser_trans))
treat_race_canvas <- cbind(afam_table, hispanic_table, caucasian_table)
colnames(treat_race_canvas) <- c("0", "afam", "1", "hisp", "3", "caucasian")
pander(t(treat_race_canvas))
race <- data.frame(table(t1$vf_racename))
colnames(pid.interact) <- c("African American", "Asian", "Hispanic", "Caucasian")
panderOptions('table.caption.prefix','')
pander(t(race))
afam <- subset(treat_canvas, treat_canvas$vf_racename == "African American")
hispanic <- subset(treat_canvas, treat_canvas$vf_racename == "Hispanic")
caucasian <- subset(treat_canvas, treat_canvas$vf_racename == "Caucasian")
afam_table <- data.frame(table(afam$canvasser_trans))
hispanic_table <- data.frame(table(hispanic$canvasser_trans))
caucasian_table <- data.frame(table(caucasian$canvasser_trans))
treat_race_canvas <- cbind(afam_table, hispanic_table, caucasian_table)
colnames(treat_race_canvas) <- c("0", "afam", "1", "hisp", "3", "caucasian")
pander((treat_race_canvas))
race <- data.frame(table(t1$vf_racename))
colnames(race) <- c("African American", "Asian", "Hispanic", "Caucasian")
race
race <- data.frame(table(t1$vf_racename))
rownames(race) <- c("African American", "Asian", "Hispanic", "Caucasian")
panderOptions('table.caption.prefix','')
pander(t(race))
afam <- subset(treat_canvas, treat_canvas$vf_racename == "African American")
hispanic <- subset(treat_canvas, treat_canvas$vf_racename == "Hispanic")
caucasian <- subset(treat_canvas, treat_canvas$vf_racename == "Caucasian")
afam_table <- data.frame(table(afam$canvasser_trans))
hispanic_table <- data.frame(table(hispanic$canvasser_trans))
caucasian_table <- data.frame(table(caucasian$canvasser_trans))
treat_race_canvas <- cbind(afam_table, hispanic_table, caucasian_table)
colnames(treat_race_canvas) <- c("0", "afam", "1", "hisp", "3", "caucasian")
pander((treat_race_canvas))
treat_race_canvas
race <- data.frame(table(t1$vf_racename))
rownames(race) <- c("African American", "Asian", "Hispanic", "Caucasian")
panderOptions('table.caption.prefix','')
pander(t(race))
afam <- subset(treat_canvas, treat_canvas$vf_racename == "African American")
hispanic <- subset(treat_canvas, treat_canvas$vf_racename == "Hispanic")
caucasian <- subset(treat_canvas, treat_canvas$vf_racename == "Caucasian")
afam_table <- data.frame(table(afam$canvasser_trans))
hispanic_table <- data.frame(table(hispanic$canvasser_trans))
caucasian_table <- data.frame(table(caucasian$canvasser_trans))
treat_race_canvas <- cbind(afam_table, hispanic_table, caucasian_table)
colnames(treat_race_canvas) <- c("0", "afam", "1", "hisp", "3", "caucasian")
rownames(treat_race_canvas) <- c("canvasser non trans", "canvasser trans")
pander((treat_race_canvas))
race <- data.frame(table(t1$vf_racename))
rownames(race) <- c("African American", "Asian", "Hispanic", "Caucasian")
panderOptions('table.caption.prefix','')
pander(t(race))
afam <- subset(treat_canvas, treat_canvas$vf_racename == "African American")
hispanic <- subset(treat_canvas, treat_canvas$vf_racename == "Hispanic")
caucasian <- subset(treat_canvas, treat_canvas$vf_racename == "Caucasian")
afam_table <- data.frame(table(afam$canvasser_trans))
hispanic_table <- data.frame(table(hispanic$canvasser_trans))
caucasian_table <- data.frame(table(caucasian$canvasser_trans))
treat_race_canvas <- cbind(afam_table, hispanic_table, caucasian_table)
colnames(treat_race_canvas) <- c("0", "African American", "1", "Hispanic", "3", "Caucasian")
rownames(treat_race_canvas) <- c("canvasser non trans", "canvasser trans")
pander((treat_race_canvas))
get_cor_column <- function (table, correlation, level){
# order rows by correlation
table <- merge(table, correlation, by = "Variable")
table %>%
arrange(-abs(cor)) %>%
filter(Variable!="cate") -> table  #remove row "cate"
# extract cor and cor_pval columns
cor_value <- round(table$cor, digits = 2)
p <- table$cor_pval
var_names <- table %>% select("Variable")
# Define notions for significance levels; spacing is important.
significance <- ifelse(p < .01, "*** ", ifelse(p < .05, "**  ", ifelse(p < .1, "*   ", "    ")))
cor_table_1 <- matrix(paste(cor_value, significance, sep=""), ncol=1)
colnames(cor_table_1) <- level
cor_table_1 <- cbind(var_names, cor_table_1)
rownames(table ) <- NULL # numbers generated when sorting, need to remove for html
tables <- list("table_1" = table, "cor_table_1" = cor_table_1)
return(tables)
}
summarize_var_by_prediction_leaves <- function(data, covariates, level, outcome,...) {
# Groups together
grp <- data %>% dplyr::group_by(leaf_id)
# so in addition to covars, we also want to see cate
vars_of_interest <- c(covariates, "cate")
# Computes the mean and sem of each covariate
means <- grp %>%
dplyr::select(leaf_id, vars_of_interest ) %>%
dplyr::summarise_all(mean) %>%
dplyr::arrange(-cate)
leaf_means <- t(means) %>% .[-1,] %>% # transpose and drop the leaf row
as.data.frame()
# Adds row and column names
leaf_means <- leaf_means %>% rownames_to_column
colnames(leaf_means) <- c("Variable", 1:(ncol(leaf_means) -1) )
# finding difference between biggest leaf and little leaf
# can only do this if there is one
if (ncol(leaf_means) > 2){
max_leaf <- means %>% filter(cate == max(cate)) %>% select(leaf_id) %>% as.numeric()
min_leaf <- means %>% filter(cate == min(cate)) %>% select(leaf_id) %>% as.numeric()
# do t-test for the contexts
data %>%
dplyr::select(leaf_id, vars_of_interest) %>%
tidyr::gather(key = variable, value = value, -leaf_id) %>%
dplyr::group_by(leaf_id, variable) %>%
dplyr::summarise(value = list(value)) %>%
tidyr::spread(leaf_id, value) %>%
group_by(variable) %>%
dplyr::select("variable",as.character(c(min_leaf, max_leaf))) %>%
dplyr::filter(variable != "cate") -> df_list_leaf_vals
colnames(df_list_leaf_vals) <-  c("Variable", "min_leaf", "max_leaf")
# if there is no variance in the leaves then t.test can not be found
df_list_leaf_vals %>% dplyr::mutate(sum_var = sum(var(unlist(min_leaf)),
var(unlist(max_leaf)))) %>%
dplyr::mutate(p_value = ifelse(sum_var == 0, NA, t.test(unlist(min_leaf),
unlist(max_leaf))$p.value)) -> final_context_pvalues
# do the t-test for CATE
data %>%
dplyr::select(level, "leaf_id", outcome) %>%
dplyr::filter(leaf_id %in% c(min_leaf, max_leaf)) %>%
dplyr::mutate(leaf_id = ifelse(leaf_id == min_leaf, "min_leaf","max_leaf")) -> mod_data
leaf_mod <- lm(as.formula(paste0(outcome, " ~ ", "leaf_id:", level)),
data =  mod_data)
leaf_test <- broom::tidy(car::linearHypothesis(leaf_mod,
paste0("leaf_idmin_leaf:",level,
" = ", "leaf_idmax_leaf:", level)))
final_cate_pvalue <- data.frame(Variable = c("cate"),
p_value = leaf_test$p.value[2])
final_pvalues <- rbind(final_context_pvalues[c("Variable", "p_value")], final_cate_pvalue)
leaf_means <- merge(leaf_means, final_pvalues, by = "Variable")
}
leaf_means
}
fmla <- make_formula(y=outcome,
x=contexts,
w=treatment,
include_xw=FALSE,
include_intercept=TRUE) # Due to CT bug
fmla
# Other treatments and levels are seen as regular covariates
fmla <- make_formula(y=outcome,
x=contexts,
w=treatment,
include_xw=TRUE,
include_intercept=TRUE) # Due to CT bug
fmla
# Fit and cross-validate an __honest__ causal tree
ctree <- fit_causal_tree(formula=fmla,
w=treatment,
df_train = df_train_trans,
df_est = df_est_trans,
minsize = 5)
# Other treatments and levels are seen as regular covariates
fmla <- make_formula(y=outcome,
x=contexts,
w=treatment,
include_xw=FALSE,
include_intercept=TRUE) # Due to CT bug
# Fit and cross-validate an __honest__ causal tree
ctree <- fit_causal_tree(formula=fmla,
w=treatment,
df_train = df_train_trans,
df_est = df_est_trans,
minsize = 5)
ctree
# Predict leaf it on new set
df_est_trans[,"leaf_id"] <- treeClust::rpart.predict.leaves(ctree,
df_est_trans, type="where")
# Residualize the dependent variable, then transform it per (*44*).
t1.resid <- summary(lm(data$trans.tolerance.dv.t1 ~ x))$residuals
data$t1.resid[as.numeric(names(t1.resid))] <- t1.resid # Maps residuals back into data.
data$transformed.outcome <- with(data, t1.resid * (treat_ind - .5) / .25)
# Vectors describing rows where the outcome was observed.
include.obs <- !is.na(data$transformed.outcome)
x.subset <- cbind(data$treat_ind[include.obs], x[include.obs,])
transformed.outcome <- data$transformed.outcome[include.obs]
# Lasso.
cvfit.lasso <- cv.glmnet(x.subset, transformed.outcome, alpha = 1)
coef(cvfit.lasso, s = "lambda.min")
t1_related <- subset(t1_related, !is.na(t1_related$canvasser_trans))
df_split_trans <- modelr::resample_partition(t1_related, c(train=0.5, estim=0.5))
df_train_trans <- dplyr::as_tibble(df_split_trans$train)
df_est_trans<- dplyr::as_tibble(df_split_trans$estim)
outcome <- "trans.tolerance.dv.t1"
treatment <- "exp_actual_convo"
contexts <- colnames(t1_related)[1:24]
contexts <- contexts[contexts != treatment]
colnames(contexts)
contexts
contexts <- colnames(t1_related)[1:24]
contexts
